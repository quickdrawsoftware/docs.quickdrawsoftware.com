"use strict";(self.webpackChunkdocs_quickdrawsoftware_com=self.webpackChunkdocs_quickdrawsoftware_com||[]).push([[684],{3905:function(e,t,i){i.d(t,{Zo:function(){return l},kt:function(){return g}});var n=i(7294);function o(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function s(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function a(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?s(Object(i),!0).forEach((function(t){o(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):s(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function r(e,t){if(null==e)return{};var i,n,o=function(e,t){if(null==e)return{};var i,n,o={},s=Object.keys(e);for(n=0;n<s.length;n++)i=s[n],t.indexOf(i)>=0||(o[i]=e[i]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)i=s[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(o[i]=e[i])}return o}var c=n.createContext({}),p=function(e){var t=n.useContext(c),i=t;return e&&(i="function"==typeof e?e(t):a(a({},t),e)),i},l=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var i=e.components,o=e.mdxType,s=e.originalType,c=e.parentName,l=r(e,["components","mdxType","originalType","parentName"]),m=p(i),g=o,d=m["".concat(c,".").concat(g)]||m[g]||u[g]||s;return i?n.createElement(d,a(a({ref:t},l),{},{components:i})):n.createElement(d,a({ref:t},l))}));function g(e,t){var i=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=i.length,a=new Array(s);a[0]=m;var r={};for(var c in t)hasOwnProperty.call(t,c)&&(r[c]=t[c]);r.originalType=e,r.mdxType="string"==typeof e?e:o,a[1]=r;for(var p=2;p<s;p++)a[p]=i[p];return n.createElement.apply(null,a)}return n.createElement.apply(null,i)}m.displayName="MDXCreateElement"},4947:function(e,t,i){i.r(t),i.d(t,{contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return r},metadata:function(){return p},toc:function(){return l}});var n=i(7462),o=i(3366),s=(i(7294),i(3905)),a=["components"],r={sidebar_position:7,id:"customization"},c="Customization",p={unversionedId:"jitsi-cfn/customization",id:"jitsi-cfn/customization",isDocsHomePage:!1,title:"Customization",description:"Using Post-install Scripts",source:"@site/docs/jitsi-cfn/jitsi-cfn-7-customization.md",sourceDirName:"jitsi-cfn",slug:"/jitsi-cfn/customization",permalink:"/jitsi-cfn/customization",editUrl:"https://github.com/quickdrawsoftware/docs.quickdrawsoftware.com/docs/jitsi-cfn/jitsi-cfn-7-customization.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7,id:"customization"},sidebar:"tutorialSidebar",previous:{title:"Usage Notes",permalink:"/jitsi-cfn/usage"},next:{title:"Frequently Asked Questions",permalink:"/jitsi-cfn/faq"}},l=[{value:"Using Post-install Scripts",id:"using-post-install-scripts",children:[]},{value:"Changing Jitsi branding",id:"changing-jitsi-branding",children:[]}],u={toc:l};function m(e){var t=e.components,i=(0,o.Z)(e,a);return(0,s.kt)("wrapper",(0,n.Z)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"customization"},"Customization"),(0,s.kt)("h2",{id:"using-post-install-scripts"},"Using Post-install Scripts"),(0,s.kt)("p",null,"The CloudFormation template gives you post-install hooks to make additional modifications to the deployment on launch. You write a bash script that does additional config, which can include things like using command line tools to modify the core jitsi config files, downloading a custom frontend, etc, it's completely up to you. You then host that setup script somewhere public (e.g. in an S3 bucket), and provide the URL to the CloudFormation template as a parameter, which will download and run that script as part of the install process, so you have a repeatable build/launch process for all of your customizations."),(0,s.kt)("p",null,"All post-install scripts are run as root."),(0,s.kt)("p",null,"It's recommended to develop scripts using something like a self-contained Docker image of Jitsi to increase familiarity with the different config files, then add them to the CloudFormation template when ready."),(0,s.kt)("h2",{id:"changing-jitsi-branding"},"Changing Jitsi branding"),(0,s.kt)("p",null,"UI customization can be accomplished a number of ways. You can fork the code for the Jitsi Meet UI (it's a React app), compile a new app bundle with npm and webpack, and replace the stock one with a post-install script. Alternately, you can use the interface.js API to provide customization parameters in URL parameters when creating a room. Or, you can fully whitelabel a custom interface with the iframe API."),(0,s.kt)("p",null,"Here are some resources for implementing UI customizations:"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://jitsi.github.io/handbook/docs/dev-guide/dev-guide-iframe"},"https://jitsi.github.io/handbook/docs/dev-guide/dev-guide-iframe")),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://jitsi.github.io/handbook/docs/user-guide/user-guide-advanced"},"https://jitsi.github.io/handbook/docs/user-guide/user-guide-advanced")),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://github.com/jitsi/jitsi-meet/blob/master/config.js"},"https://github.com/jitsi/jitsi-meet/blob/master/config.js")),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://github.com/jitsi/jitsi-meet/blob/master/interface_config.js"},"https://github.com/jitsi/jitsi-meet/blob/master/interface_config.js")),(0,s.kt)("p",null,"The core UI files are stored in: ",(0,s.kt)("inlineCode",{parentName:"p"},"/usr/share/jitsi-meet/")," on the Meet server for each shard."),(0,s.kt)("p",null,"One quick way to do some light branding is using the ",(0,s.kt)("inlineCode",{parentName:"p"},"body.html")," file. It's empty by default, and is included into the main landing page, so anything you add there is appended to the page. You could include a ",(0,s.kt)("inlineCode",{parentName:"p"},"<style>")," block there and use CSS to, for example, hide any page elements you didn't want."),(0,s.kt)("p",null,'Here\'s an example post-install script which replaces the Jitsi logos and some branding copy using a combination of downloading files and editing configuration files. To use, just modify, upload to a publicly accessible URL, and provide the URL to the "Meet Post-Install Script" template parameter.'),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/bash\n\n# Fetch replacement logos from a public URL you provide\nwget -O /tmp/favicon.ico https://example.com/favicon.ico\nwget -O /tmp/logo.png https://example.com/logo.png\nwget -O /tmp/apple-touch-icon.png https://example.com/apple-touch-icon.png\nwget -O /tmp/jitsiLogo_square.png https://example.com/jitsiLogo_square.png\nwget -O /tmp/jitsilogo.png https://example.com/jitsilogo.png\nwget -O /tmp/logo-deep-linking.png https://example.com/logo-deep-linking.png\nwget -O /tmp/watermark.svg https://example.com/watermark.svg\nwget -O /tmp/welcome-background.png https://example.com/welcome-background.png\n\n# Overwrite the built-in Jitsi logo files\ncp /tmp/favicon.ico /usr/share/jitsi-meet/favicon.ico\ncp /tmp/favicon.ico /usr/share/jitsi-meet/images/favicon.ico\ncp /tmp/logo.png /usr/share/jitsi-meet/images/logo.png\ncp /tmp/apple-touch-icon.png /usr/share/jitsi-meet/images/apple-touch-icon.png\ncp /tmp/jitsiLogo_square.png /usr/share/jitsi-meet/images/jitsiLogo_square.png\ncp /tmp/jitsilogo.png /usr/share/jitsi-meet/images/jitsilogo.png\ncp /tmp/logo-deep-linking.png /usr/share/jitsi-meet/images/logo-deep-linking.png\ncp /tmp/watermark.svg /usr/share/jitsi-meet/images/watermark.svg\ncp /tmp/welcome-background.png /usr/share/jitsi-meet/images/welcome-background.png\n\n# Change the name of the app in title.html (used for the page title and open graph tags)\nsed -i "s/Jitsi Meet/Your App Name/g" /usr/share/jitsi-meet/title.html\nsed -i "s/Join a WebRTC video conference powered by the Jitsi Videobridge/Join a video conference on Your App Name/g" /usr/share/jitsi-meet/title.html\n\n# Change the name of the app in interface_config.js\nsed -i "s/APP_NAME: \'Jitsi Meet\'/APP_NAME: \'Your App Name\'/g" /usr/share/jitsi-meet/interface_config.js\nsed -i "s/Fellow Jitster/Guest/g" /usr/share/jitsi-meet/interface_config.js\nsed -i "s/jitsi.org/example.com/g" /usr/share/jitsi-meet/interface_config.js\n\n# Replace some text strings directly in the compiled React bundle - super hacky and not really recommended, but will work for very quick branding changes\nsed -i "s/Jitsi on mobile/Your App on mobile/g" /usr/share/jitsi-meet/libs/app.bundle.min.js\nsed -i "s/\\"Jitsi Meet\\"/\\"Your App Name\\"/g" /usr/share/jitsi-meet/libs/app.bundle.min.js\nsed -i "s/\\"Secure and high quality meetings\\"/\\"Your App Tagline\\"/g" /usr/share/jitsi-meet/libs/app.bundle.min.js\n\n# Replace the same text strings in the internationalization bundle\nsed -i "s/Jitsi on mobile/Your App on mobile/g" /usr/share/jitsi-meet/lang/main.json\nsed -i "s/\\"Jitsi Meet\\"/\\"Your App Name\\"/g" /usr/share/jitsi-meet/lang/main.json\nsed -i "s/\\"Secure and high quality meetings\\"/\\"Your App Tagline\\"/g" /usr/share/jitsi-meet/lang/main.json\n\n# Restart nginx\nservice nginx restart\n')))}m.isMDXComponent=!0}}]);